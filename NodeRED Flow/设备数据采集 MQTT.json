[{"id":"ee494fda74a993ed","type":"subflow","name":"Msg For Me","info":"接收并处理来自 ROOT 节点的消息","category":"","in":[],"out":[{"x":720,"y":300,"wires":[{"id":"8b125b11733893ec","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"393a63b091985dd1","type":"websocket in","z":"ee494fda74a993ed","name":"Meshtastic 接收","server":"","client":"meshtastic_ws","x":180,"y":300,"wires":[["8b125b11733893ec"]]},{"id":"8b125b11733893ec","type":"function","z":"ee494fda74a993ed","name":"消息处理","func":"// Debug输入\nnode.debug(\"Received message: \" + JSON.stringify(msg));\n\n// 统一处理输入数据格式\nlet payload;\ntry {\n    payload = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n} catch (e) {\n    node.error(\"Failed to parse payload: \" + e.message);\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Parse Error\" });\n    return null;\n}\n\n// 检查消息类型\nif (payload.type !== \"text\") {\n    return null;\n}\n\n// 获取必要的值\nconst fromShortName = payload.shortName;\n// const fromLongName = payload.fromLongName;\nconst myShortName = global.get(\"userShortName\");\n\nnode.debug(\"fromShortName: \" + fromShortName);\nnode.debug(\"myShortName: \" + myShortName);\n\n// 验证本地配置\nif (!myShortName) {\n    node.error(\"Runtime error: userShortName not found\");\n    node.status({ fill: \"red\", shape: \"ring\", text: \"No Local ID\" });\n    return null;\n}\n\n// 解析消息内容\nlet msgMsg;\ntry {\n    msgMsg = (typeof payload.message === 'string') ? JSON.parse(payload.message) : payload.message;\n} catch (e) {\n    node.error(\"Failed to parse message content: \" + e.message);\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Content Parse Error\" });\n    return null;\n}\n\n// 验证消息格式\nif (!msgMsg || typeof msgMsg.i === 'undefined') {\n    node.error(\"Invalid message format: missing 'i' field\");\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Invalid Format\" });\n    return null;\n}\n\n// 检查目标接收者\nconst msgToNode = msgMsg.i;\nif (msgToNode !== myShortName) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Not For Me: \" + msgToNode });\n    return null;\n}\n\n// 设置成功状态\nnode.status({ fill: \"green\", shape: \"dot\", text: \"Message Received\" });\n\n// 输出处理后的消息\nmsg.payload = msgMsg;\nmsg.fromShortName = fromShortName;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":300,"wires":[[]]},{"id":"632d4d71cc1abd2c","type":"subflow","name":"Send Mesh","info":"","category":"","in":[{"x":200,"y":220,"wires":[{"id":"11f176b2edaf6387"}]}],"out":[],"env":[{"name":"channel","type":"str","value":"0"}],"meta":{},"color":"#DDAA99","status":{"x":760,"y":300,"wires":[{"id":"6875daf9fb761952","port":1}]}},{"id":"426501dd879010dd","type":"websocket out","z":"632d4d71cc1abd2c","name":"Meshtastic 发送","server":"","client":"meshtastic_ws","x":560,"y":220,"wires":[]},{"id":"11f176b2edaf6387","type":"function","z":"632d4d71cc1abd2c","name":"格式化发送消息","func":"// 检查是否有目标信息\n// if (!msg.mshParams) {\n//     node.error(\"缺少目标信息\");\n//     return null;\n// }\n\n\n// 构造发送消息\nconst outMsg = {\n    payload: {\n        message: JSON.stringify(msg.payload)\n    }\n};\n\n// 添加目标信息\n// if (msg.mshParams.channel !== undefined) {\n//     outMsg.payload.channel = msg.mshParams.channel;\n// } else if (msg.mshParams.destination) {\n//     outMsg.payload.destination = msg.mshParams.destination;\n// } else {\noutMsg.payload.channel = 0;  // 默认频道\n// }\n\nreturn outMsg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":220,"wires":[["426501dd879010dd"]]},{"id":"9f4fe910a7de3da6","type":"websocket in","z":"632d4d71cc1abd2c","name":"Meshtastic 接收","server":"","client":"meshtastic_ws","x":320,"y":320,"wires":[["6875daf9fb761952"]]},{"id":"6875daf9fb761952","type":"function","z":"632d4d71cc1abd2c","name":"statusMsg","func":"var payload = msg.payload;\n\n// 创建一个状态消息\nvar statusMsg = { payload: {} };\n\nif (payload.type === \"success\") {\n    statusMsg.payload = { fill: \"green\", shape: \"dot\", text: \"操作成功\" };\n} else if (payload.type === \"error\") {\n    statusMsg.payload = { fill: \"red\", shape: \"dot\", text: \"操作失败\" };\n    // } \n    // else if (payload.type === \"warning\") {\n    //     statusMsg.payload = { fill: \"yellow\", shape: \"dot\", text: \"警告\" };\n    // } else if (payload.type === \"info\") {\n    //     statusMsg.payload = { fill: \"blue\", shape: \"dot\", text: \"信息\" };\n} else {\n    // statusMsg.payload = { fill: \"grey\", shape: \"ring\", text: \"\" };\n    statusMsg = null;\n}\n\n// 返回两个输出：原始消息和状态消息\nreturn [msg, statusMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":320,"wires":[[],[]]},{"id":"meshtastic_ws","type":"websocket-client","path":"ws://host.docker.internal:5800","tls":"","wholemsg":"false","hb":"0","subprotocol":"","headers":[]},{"id":"955d78aac10139fe","type":"tab","label":"设备数据采集 MQTT","disabled":false,"info":""},{"id":"4be8d9b3923ca59e","type":"group","z":"955d78aac10139fe","name":"1. Trigger 需要更新的消息 - 发送 Meshtastic","style":{"label":true},"nodes":["b6084de462468e41","e059e7e99323058f","2540be18bc8ad876","postgresql_node","4e758c488d33eb4d","d8e4d6953fa9a076","8b38e85019473e87","32cd929c7f2770f5","c1de330f07ea9ed8"],"x":54,"y":39,"w":1052,"h":222},{"id":"fcf57be2fb50f3a4","type":"group","z":"955d78aac10139fe","name":"2. 获取数据信息","style":{"label":true},"nodes":["7402d41cfdc6f46a","0c25b2ef218b88a4","83bd04cc15053582","91bd3475aef3cb17","4ef0749638a1bff0","813d81593dcdcdb6","40af34f3832ee6ed","a52b2045223ca3b2","c69abc8df064a308","4bcd124c8652b92e","8a0dd1891f5c5c28"],"x":54,"y":279,"w":972,"h":282},{"id":"20b5958020a35a99","type":"group","z":"955d78aac10139fe","name":"3. 检查 Ready 的设备，打包为 MQTT 报文","style":{"label":true},"nodes":["7659a94a45652b48","01044edaf0e836ca","5993f457ceaf2d9f","086a1de8c310f0a4","0f207687a4b6bfbd","52d985795e94a23f","73382b1dfca1adcf","f5241138b2779964","4f0f56637af233ac","6486040006f03f66"],"x":34,"y":599,"w":992,"h":242},{"id":"0196f15e12628c5e","type":"group","z":"955d78aac10139fe","name":"retrying","style":{"label":true},"nodes":["447ee537ef0e78ca","5d84a13f978cf05d","f46edb31970dd3d9","e7ba270d367e09a6","7ba354642b123b86","a3f249371918147d","abd3380d31679f38","c0021f62a4c85135","a3c86e9f6e4a28d3"],"x":34,"y":1599,"w":1052,"h":222},{"id":"44d88b47b8d1b905","type":"group","z":"955d78aac10139fe","name":"2.1 超时安全检查","style":{"label":true},"nodes":["a08767df52438557","e94a6c4532975923","b245b723fc847f3d","00e28afb32e0c545","751fb4b452d559ca","23266c3047bc9894","0d54b82ce63309a2","12f191a9bf1022a1","9020fc680dd11332","b20f12265dd02368"],"x":14,"y":939,"w":1052,"h":222},{"id":"b6084de462468e41","type":"postgresql","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"get peding above 2 minutes","query":"  -- 获取状态为pending且最后更新时间超过5分钟的属性\n  SELECT \n      dp.id,\n      dp.device_id,\n      dp.property_id,\n      dp.request_type,\n      dp.function_code,\n      dp.register_address,\n      dp.data_type,\n      dp.data_length,\n      dp.byte_order,\n      dp.word_order,\n      dp.scale_factor,\n      dp.value_offset,\n      dp.enum_values,\n      d.communication_type,\n      d.communication_id,\n      d.connection_type,\n      dcp.port_number,\n      dcp.slave_address,\n      dcp.baud_rate,\n      dcp.stop_bits,\n      dcp.data_bits,\n      dcp.parity,\n      dcp.timeout,\n      dcp.retry_count\n  FROM \n      device_properties dp\n  JOIN \n      devices d ON dp.device_id = d.device_id\n  JOIN \n      device_connection_params dcp ON dp.device_id = dcp.device_id\n  WHERE \n      dp.status = 'pending'\n      AND dp.request_type = 'state'\n    --   AND dp.updated_at <= NOW() - INTERVAL '2 minutes'\n      AND dp.updated_at <= NOW() - INTERVAL '1 minute'\n  ORDER BY \n      dp.updated_at ASC\n  LIMIT 20;  -- 可以根据需要调整批次大小","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":200,"y":160,"wires":[["2540be18bc8ad876"]]},{"id":"e059e7e99323058f","type":"inject","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"检查需要更新的属性","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"1","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":200,"y":100,"wires":[["b6084de462468e41"]]},{"id":"2540be18bc8ad876","type":"function","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"获取状态为pending且最后更新时间超过5分钟的属性","func":"let sessionCounter = 0; // 全局计数器\n\n// 存储需要更新状态的属性ID列表和对应的 session_id\nlet propertyUpdates = [];\n\nfunction transformItem(item) {\n    // 生成唯一的 ss 字段\n    const sessionId = Date.now() + \"_\" + sessionCounter++;\n\n    // 记录需要更新状态的属性ID和 session_id\n    propertyUpdates.push({ id: item.id, session_id: sessionId });\n\n    // 提取 communication_id 并格式化\n    const communicationId = item.communication_id.replace(\"R1000_\", \"\").padStart(4, \"0\");\n\n    // node.error(item.property_id + \":data_length = \" + item.data_length);\n    // 根据 request_type 生成不同的 JSON 结构\n    const result = {\n        i: communicationId,\n        tp: item.property_id, // 最好不超过 10 个字符!\n        v: \"1\", // 版本号固定为 1\n        t: \"r\", // connection_type 默认为 rtu\n        p: item.port_number,\n        c: {\n            a: parseInt(item.slave_address,10),\n            f: parseInt(item.function_code, 16), // 字符转换为数字\n            r: `0x${item.register_address}`, // 添加 0x 前缀\n            n: item.data_length > 1? (item.data_length / 2): 1  // 字节数量 一个 n 代表 两个字节\n        },\n        ss: sessionId // 设置唯一的 ss 字段\n    };\n\n    // 根据连接类型设置 t 字段\n    if (item.connection_type !== \"modbus_rtu\") {\n        result.t = \"t\";\n    } else {\n        result.t = \"r\";\n    }\n\n    // 如果是 command 类型且 data_type 为 enum，填充 d 字段\n    if (item.request_type === \"command\" && item.data_type === \"enum\") {\n        result.c.d = Object.values(item.enum_values)[0]; // 默认取第一个值\n    }\n\n    return result;\n}\n\n// 转换数据项\nconst outputArray = msg.payload.map(transformItem);\n\n// 设置输出消息\nmsg.payload = outputArray;\n\n// 如果有需要更新的属性，生成更新SQL\nif (propertyUpdates.length > 0) {\n    // 创建更新SQL语句\n    const updateSql = `\n        UPDATE device_properties\n        SET status = 'processing', \n            session_id = CASE id\n                ${propertyUpdates.map(update => `WHEN ${update.id} THEN '${update.session_id}'`).join(' ')}\n            END\n        WHERE id IN (${propertyUpdates.map(update => update.id).join(',')})\n    `;\n\n    // 将SQL语句存储在msg对象中，以便后续节点执行\n    msg.query = updateSql;\n\n    // 也可以将ID和对应的 session_id 列表保存下来，以便后续处理\n    msg.updatedProperties = propertyUpdates;\n}\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":220,"wires":[["postgresql_node","4e758c488d33eb4d","d8e4d6953fa9a076"]]},{"id":"postgresql_node","type":"postgresql","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"更新 property 为 processing","query":"","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":"","outputs":1,"x":640,"y":220,"wires":[[]]},{"id":"4e758c488d33eb4d","type":"debug","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"超过5分钟的属性","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":630,"y":160,"wires":[]},{"id":"d8e4d6953fa9a076","type":"split","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"Split JSON item","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":true,"addname":"","property":"payload","x":640,"y":80,"wires":[["c1de330f07ea9ed8"]]},{"id":"8b38e85019473e87","type":"debug","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"To Meshtastic Network","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":960,"y":80,"wires":[]},{"id":"32cd929c7f2770f5","type":"subflow:632d4d71cc1abd2c","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"","x":930,"y":200,"wires":[]},{"id":"7402d41cfdc6f46a","type":"subflow:ee494fda74a993ed","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"","x":170,"y":420,"wires":[["83bd04cc15053582","4bcd124c8652b92e"]]},{"id":"a08767df52438557","type":"inject","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"Processing 超时的 Session，to failed","props":[{"p":"payload"}],"repeat":"2","crontab":"","once":false,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":210,"y":1000,"wires":[["e94a6c4532975923"]]},{"id":"0c25b2ef218b88a4","type":"comment","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"｛ss\":1742187085902,\"tp\":\"FC\",\"d\":［3］｝","info":"","x":590,"y":320,"wires":[]},{"id":"83bd04cc15053582","type":"function","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"匹配 Session","func":"// 获取 mesh_session_id 和 _value\nlet payload = msg.payload;\nconst mesh_session_id = payload.ss;\nconst modbus_value = payload.d; // 假设只有一个寄存器\n\n// 保存原始数据，供后续使用\nmsg.original = {\n    mesh_session_id: mesh_session_id,\n    modbus_value: modbus_value\n};\n\n// 查询匹配的 Property\nmsg.query = `\n    SELECT \n        id,\n        device_id,\n        property_id,\n        data_type,\n        enum_values,\n        session_id,\n        status,\n        data_length\n    FROM \n        device_properties\n    WHERE \n        session_id = $1\n        ;\n`;\nmsg.params = [mesh_session_id]; // 设置查询参数\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":420,"wires":[["4ef0749638a1bff0"]]},{"id":"91bd3475aef3cb17","type":"inject","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"TEST 噪声 session 为1742891806240_0","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"ss\":\"1742891806240_0\",\"d\":[480],\"tp\":\"noise_level\",\"i\":\"000F\"}","payloadType":"json","x":260,"y":360,"wires":[["83bd04cc15053582"]]},{"id":"4ef0749638a1bff0","type":"postgresql","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":390,"y":460,"wires":[["813d81593dcdcdb6","40af34f3832ee6ed"]]},{"id":"813d81593dcdcdb6","type":"debug","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"msg 匹配 Session","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":530,"y":520,"wires":[]},{"id":"40af34f3832ee6ed","type":"function","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"更新 【单一】Property 数据","func":"// 检查查询结果\nif (!msg.payload || msg.payload.length === 0) {\n    node.warn(`未找到 session_id 为 ${msg.original.mesh_session_id} 的 Property`);\n    node.status({ fill: \"red\", shape: \"ring\", text:\"未找到 session_id\"});\n    return null;\n}\n\nconst property = msg.payload[0]; // 获取第一个匹配的 Property\nconst original_value = msg.original.modbus_value;\nconst data_length = property.data_length;\nlet fc_length =  property.data_length / 2 \nfc_length = fc_length < 1 ? 1 : fc_length ;\n\nlet _value;\n\nswitch (fc_length) {\n    case 1:\n        // 8位数据（1字节）\n        _value = original_value[0];\n        break;\n        \n    case 2:\n        // 16位数据（2字节）\n        _value = (original_value[0] << 8) | original_value[1];\n        break;\n        \n    case 4:\n        // 32位数据（4字节）\n        _value = (original_value[0] << 24) | \n                (original_value[1] << 16) | \n                (original_value[2] << 8) | \n                original_value[3];\n        break;\n        \n    default:\n        node.error(`Unexpected data length: ${data_length}`);\n        break;\n}\n// 创建或更新 property_id: value 格式\nconst updatedEnumValues = {\n    // ...currentEnumValues,\n    [property.property_id]: _value\n};\n\n// 生成更新 SQL\nmsg.query = `\n    UPDATE device_properties\n    SET \n        read_values = $1::jsonb,\n        status = 'success',\n        updated_at = CURRENT_TIMESTAMP\n    WHERE \n        id = $2;\n`;\n\nmsg.params = [JSON.stringify(updatedEnumValues), property.id];\n\n// 保存更新后的信息，以便后续处理\nmsg.updatedProperty = {\n    id: property.id,\n    property_id: property.property_id,\n    device_id: property.device_id,\n    value: _value,\n    read_values: updatedEnumValues,\n    data_length: data_length\n};\nnode.status({fill:\"green\",shape:\"ring\",text:\"成功\"});\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":380,"wires":[["a52b2045223ca3b2","8a0dd1891f5c5c28"]]},{"id":"a52b2045223ca3b2","type":"postgresql","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":670,"y":440,"wires":[["c69abc8df064a308"]]},{"id":"c69abc8df064a308","type":"debug","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"获取数据消息 msg","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":810,"y":520,"wires":[]},{"id":"7659a94a45652b48","type":"inject","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"5mins 触发 test for 主动触发","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"300","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":200,"y":640,"wires":[["01044edaf0e836ca"]]},{"id":"01044edaf0e836ca","type":"postgresql","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"","query":"SELECT \n    d.device_type,\n    d.device_id,\n    p.property_id,\n    p.read_values,\n    p.status as property_status,\n    p.request_type,\n    p.scale_factor,\n    p.value_offset,\n    p.data_length  -- 添加data_length字段\nFROM devices d\nJOIN device_properties p ON d.device_id = p.device_id\nWHERE p.request_type = 'state'\nAND EXISTS (\n    SELECT 1 \n    FROM device_properties p2 \n    WHERE p2.device_id = d.device_id \n    AND p2.status = 'success'\n)\nORDER BY device_id;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":230,"y":680,"wires":[["5993f457ceaf2d9f","73382b1dfca1adcf"]]},{"id":"5993f457ceaf2d9f","type":"debug","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"debug 38","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":460,"y":640,"wires":[]},{"id":"086a1de8c310f0a4","type":"mqtt out","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"3211ebd24c9f85f3","x":910,"y":720,"wires":[]},{"id":"e94a6c4532975923","type":"function","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"查询 Processing 超时的 items","func":"// 获取当前时间戳（毫秒）\nconst currentTime = Date.now();\n\n// 计算1分钟前的时间戳（毫秒）\nconst oneMinuteAgo = currentTime - 60 * 4 * 1000;\n\n// 构建查询语句\nmsg.query = `\nSELECT property_id, device_id FROM device_properties \nWHERE status = 'processing'\nAND (EXTRACT(EPOCH FROM updated_at) * 1000)::BIGINT < $1;\n`\nmsg.params = [oneMinuteAgo];\n\n// 设置一个属性，以便后续节点知道这是超时查询\nmsg._isTimeoutQuery = true;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":980,"wires":[["b245b723fc847f3d"]]},{"id":"b245b723fc847f3d","type":"postgresql","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":560,"y":1020,"wires":[["00e28afb32e0c545"]]},{"id":"00e28afb32e0c545","type":"function","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"更新超时结果","func":"// 检查是否是超时查询的结果\n\nif (msg._isTimeoutQuery && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    // 准备更新语句\n    const timedOutProperties = msg.payload;\n\n    // 为每个超时属性创建单独的消息\n    const messages = timedOutProperties.map(prop => {\n        return {\n            query: `\n            UPDATE device_properties \n            SET status = 'failed', updated_at = NOW() \n            WHERE property_id = $1\n            AND device_id = $2\n            `,\n            params: [prop.property_id, prop.device_id]\n        };\n    });\n\n    node.log(`Updating ${timedOutProperties.length} timed out tasks to failed status`);\n\n    // 发送多个消息\n    node.send([messages]);\n    return null;\n} else {\n    // node.warn(\"No timed out processing tasks found or not a timeout query result\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":810,"y":980,"wires":[["751fb4b452d559ca"]]},{"id":"751fb4b452d559ca","type":"postgresql","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":800,"y":1020,"wires":[["23266c3047bc9894"]]},{"id":"23266c3047bc9894","type":"debug","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"?","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":970,"y":1020,"wires":[],"info":"params: [\"noise_level_2\",\"noise_meter_1\"]\n\n\nUPDATE device_properties \nSET status = 'failed', updated_at = NOW() \nWHERE property_id = $1\nAND device_id = $2\n"},{"id":"c1de330f07ea9ed8","type":"delay","z":"955d78aac10139fe","g":"4be8d9b3923ca59e","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":840,"y":120,"wires":[["32cd929c7f2770f5","8b38e85019473e87"]]},{"id":"4bcd124c8652b92e","type":"debug","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"Meshtastic 消息","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":280,"y":520,"wires":[]},{"id":"0f207687a4b6bfbd","type":"debug","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"MQTT 报文","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":910,"y":640,"wires":[]},{"id":"52d985795e94a23f","type":"debug","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"msg","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":810,"y":800,"wires":[]},{"id":"73382b1dfca1adcf","type":"function","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"计算、打包、更新","func":"function processValue(value, scaleFactor, valueOffset, dataLength) {\n    let _value = value;\n    if (dataLength === 1) {\n        _value = (value >> 8) & 0xFF;\n    }\n    _value = _value * scaleFactor + valueOffset;\n    return _value;\n}\n\nfunction processDeviceData(rows) {\n    const deviceMap = new Map();\n    const propertiesToUpdate = new Set(); // 用Set来存储需要更新的属性\n\n    rows.forEach(row => {\n        // 记录需要更新的属性\n        propertiesToUpdate.add(`${row.device_id}:${row.property_id}`);\n\n        if (!deviceMap.has(row.device_id)) {\n            deviceMap.set(row.device_id, {\n                deviceId: row.device_id,\n                device_type: row.device_type,\n                data: {},\n                dateTime: Date.now()\n            });\n        }\n\n        const deviceData = deviceMap.get(row.device_id);\n\n        if (row.read_values) {\n            const readValues = typeof row.read_values === 'string'\n                ? JSON.parse(row.read_values)\n                : row.read_values;\n\n            const processedValues = {};\n            for (const [key, value] of Object.entries(readValues)) {\n                if (typeof value === 'number') {\n                    processedValues[key] =  value;\n                    // processedValues[key] = processValue(\n                    //     value,\n                    //     row.scale_factor || 1,\n                    //     row.value_offset || 0,\n                    //     row.data_length || 2\n                    // );\n                } else {\n                    processedValues[key] = value === 'success' ? 'pending' : value;\n                }\n            }\n\n            Object.assign(deviceData.data, processedValues);\n        }\n    });\n\n    return {\n        deviceMap,\n        propertiesToUpdate: Array.from(propertiesToUpdate).map(prop => {\n            const [device_id, property_id] = prop.split(':');\n            return { device_id, property_id };\n        })\n    };\n}\n\n// 主流程\nif (!msg.payload || !Array.isArray(msg.payload) || msg.payload.length === 0) {\n    return [null, null];\n}\n\nconst { deviceMap, propertiesToUpdate } = processDeviceData(msg.payload);\n\n// 创建MQTT消息 - 每个设备只发送一条消息\nconst messages = Array.from(deviceMap.values()).map(deviceData => ({\n    topic: `livelab/device/${deviceData.device_type}/state`,\n    payload: {\n        deviceId: deviceData.deviceId,\n        data: deviceData.data,\n        dateTime: deviceData.dateTime\n    }\n}));\n\n// 构建UPDATE查询 - 只更新实际成功的属性\nlet updateMsg = null;\nif (propertiesToUpdate.length > 0) {\n    const conditions = propertiesToUpdate\n        .map(item => `(device_id = '${item.device_id}' AND property_id = '${item.property_id}')`)\n        .join(\" OR \");\n\n    const updateQuery = `UPDATE device_properties SET status = 'pending' WHERE (${conditions}) AND status = 'success' AND request_type = 'state'`;\n    updateMsg = { query: updateQuery };\n}\n\nreturn [messages, updateMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":680,"wires":[["6486040006f03f66"],["f5241138b2779964"]]},{"id":"f5241138b2779964","type":"postgresql","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"更新 status \"success\" 为 \"pending\"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":580,"y":760,"wires":[["52d985795e94a23f"]]},{"id":"447ee537ef0e78ca","type":"postgresql","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"get retrying to send","query":"  -- 获取状态为pending且最后更新时间超过5分钟的属性\n  SELECT \n      dp.id,\n      dp.device_id,\n      dp.property_id,\n      dp.request_type,\n      dp.function_code,\n      dp.register_address,\n      dp.data_type,\n      dp.data_length,\n      dp.byte_order,\n      dp.word_order,\n      dp.scale_factor,\n      dp.value_offset,\n      dp.enum_values,\n      d.communication_type,\n      d.communication_id,\n      d.connection_type,\n      dcp.port_number,\n      dcp.slave_address,\n      dcp.baud_rate,\n      dcp.stop_bits,\n      dcp.data_bits,\n      dcp.parity,\n      dcp.timeout,\n      dcp.retry_count\n  FROM \n      device_properties dp\n  JOIN \n      devices d ON dp.device_id = d.device_id\n  JOIN \n      device_connection_params dcp ON dp.device_id = dcp.device_id\n  WHERE \n      dp.status = 'retrying'\n      AND dp.updated_at <= NOW() - INTERVAL '3 second'\n  ORDER BY \n      dp.updated_at ASC\n  LIMIT 20;  -- 可以根据需要调整批次大小","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":150,"y":1720,"wires":[["f46edb31970dd3d9"]]},{"id":"5d84a13f978cf05d","type":"inject","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"检查需要更新的属性","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"5","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":180,"y":1660,"wires":[["447ee537ef0e78ca"]]},{"id":"f46edb31970dd3d9","type":"function","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"获取状态为pending且最后更新时间超过5分钟的属性","func":"let sessionCounter = 0; // 全局计数器\n\n// 存储需要更新状态的属性ID列表和对应的 session_id\nlet propertyUpdates = [];\n\nfunction transformItem(item) {\n    // 生成唯一的 ss 字段\n    const sessionId = Date.now() + \"_\" + sessionCounter++;\n\n    // 记录需要更新状态的属性ID和 session_id\n    propertyUpdates.push({ id: item.id, session_id: sessionId });\n\n    // 提取 communication_id 并格式化\n    const communicationId = item.communication_id.replace(\"R1000_\", \"\").padStart(4, \"0\");\n\n    // 根据 request_type 生成不同的 JSON 结构\n    const result = {\n        i: communicationId,\n        tp: item.property_id, // 最好不超过 10 个字符!\n        v: \"1\", // 版本号固定为 1\n        t: \"r\", // connection_type 默认为 rtu\n        p: item.port_number,\n        c: {\n            a: parseInt(item.slave_address, 16),\n            f: parseInt(item.function_code, 16), // 字符转换为数字\n            r: `0x${item.register_address}`, // 添加 0x 前缀\n            n: item.data_length / 2 // 字节数量 一个 n 代表 两个字节\n        },\n        ss: sessionId // 设置唯一的 ss 字段\n    };\n\n    // 根据连接类型设置 t 字段\n    if (item.connection_type !== \"modbus_rtu\") {\n        result.t = \"t\";\n    } else {\n        result.t = \"r\";\n    }\n\n    // 如果是 command 类型且 data_type 为 enum，填充 d 字段\n    if (item.request_type === \"command\" && item.data_type === \"enum\") {\n        result.c.d = Object.values(item.enum_values)[0]; // 默认取第一个值\n    }\n\n    return result;\n}\n\n// 转换数据项\nconst outputArray = msg.payload.map(transformItem);\n\n// 设置输出消息\nmsg.payload = outputArray;\n\n// 如果有需要更新的属性，生成更新SQL\nif (propertyUpdates.length > 0) {\n    // 创建更新SQL语句\n    const updateSql = `\n        UPDATE device_properties\n        SET status = 'processing', \n            session_id = CASE id\n                ${propertyUpdates.map(update => `WHEN ${update.id} THEN '${update.session_id}'`).join(' ')}\n            END\n        WHERE id IN (${propertyUpdates.map(update => update.id).join(',')})\n    `;\n\n    // 将SQL语句存储在msg对象中，以便后续节点执行\n    msg.query = updateSql;\n\n    // 也可以将ID和对应的 session_id 列表保存下来，以便后续处理\n    msg.updatedProperties = propertyUpdates;\n}\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":1780,"wires":[["e7ba270d367e09a6","7ba354642b123b86","a3f249371918147d"]]},{"id":"e7ba270d367e09a6","type":"postgresql","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"更新 property 为 processing","query":"","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":"","outputs":1,"x":620,"y":1780,"wires":[[]]},{"id":"7ba354642b123b86","type":"debug","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"超过5分钟的属性","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":1720,"wires":[]},{"id":"a3f249371918147d","type":"split","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"Split JSON item","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":true,"addname":"","property":"payload","x":620,"y":1640,"wires":[["a3c86e9f6e4a28d3"]]},{"id":"abd3380d31679f38","type":"debug","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"To Meshtastic Network","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":1640,"wires":[]},{"id":"c0021f62a4c85135","type":"subflow:632d4d71cc1abd2c","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"","x":910,"y":1740,"wires":[]},{"id":"a3c86e9f6e4a28d3","type":"delay","z":"955d78aac10139fe","g":"0196f15e12628c5e","name":"","pauseType":"rate","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"10","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":820,"y":1680,"wires":[["c0021f62a4c85135","abd3380d31679f38"]]},{"id":"0d54b82ce63309a2","type":"postgresql","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"","query":"UPDATE device_properties\nSET \n    retry_count = CASE \n                    WHEN retry_count = 0 THEN retry_count + 1\n                    ELSE retry_count  -- 保持不变\n                  END,\n    status = CASE \n               WHEN retry_count >= 1 THEN 'pending'  -- 如果 retry_count > 1，状态改为 pending\n               ELSE status  -- 否则保持不变\n             END,\n    updated_at = NOW()  -- 更新时间戳\nWHERE \n    status = 'failed';\n","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":490,"y":1120,"wires":[["b20f12265dd02368"]]},{"id":"12f191a9bf1022a1","type":"debug","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"retrying msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":810,"y":1120,"wires":[]},{"id":"9020fc680dd11332","type":"inject","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"对于 Failed 的 Session，检查重发。","props":[{"p":"payload"}],"repeat":"5","crontab":"","once":false,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":210,"y":1120,"wires":[["0d54b82ce63309a2"]]},{"id":"4f0f56637af233ac","type":"function","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"计算、打包、更新","func":"function processValue(value, scaleFactor, valueOffset, dataLength) {\n    let _value = value;\n    if (dataLength === 1) {\n        _value = (value >> 8) & 0xFF;\n    }\n    _value = _value * scaleFactor + valueOffset;\n    return _value;\n}\n\nfunction processDeviceData(rows) {\n    const deviceMap = new Map();\n    const propertiesToUpdate = new Set(); // 用Set来存储需要更新的属性\n\n    rows.forEach(row => {\n        // 记录需要更新的属性\n        propertiesToUpdate.add(`${row.device_id}:${row.property_id}`);\n\n        if (!deviceMap.has(row.device_id)) {\n            const datetime = /^\\d+$/.test(row.updated_at)\n                ? Number(row.updated_at)\n                : new Date(row.updated_at).getTime();\n\n            deviceMap.set(row.device_id, {\n                deviceId: row.device_id,\n                device_type: row.device_type,\n                data: {},\n                dateTime: datetime\n            });\n        }\n\n        const deviceData = deviceMap.get(row.device_id);\n\n        if (row.read_values) {\n            const readValues = typeof row.read_values === 'string'\n                ? JSON.parse(row.read_values)\n                : row.read_values;\n\n            const processedValues = {};\n            for (const [key, value] of Object.entries(readValues)) {\n                if (typeof value === 'number') {\n                    processedValues[key] = processValue(\n                        value,\n                        row.scale_factor || 1,\n                        row.value_offset || 0,\n                        row.data_length || 2\n                    );\n                } else {\n                    processedValues[key] = value === 'success' ? 'pending' : value;\n                }\n            }\n\n            Object.assign(deviceData.data, processedValues);\n        }\n    });\n\n    return {\n        deviceMap,\n        propertiesToUpdate: Array.from(propertiesToUpdate).map(prop => {\n            const [device_id, property_id] = prop.split(':');\n            return { device_id, property_id };\n        })\n    };\n}\n\n// 主流程\nif (!msg.payload || !Array.isArray(msg.payload) || msg.payload.length === 0) {\n    return [null, null];\n}\n\nconst { deviceMap, propertiesToUpdate } = processDeviceData(msg.payload);\n\n// 创建MQTT消息 - 每个设备只发送一条消息\nconst messages = Array.from(deviceMap.values()).map(deviceData => ({\n    topic: `livelab/device/${deviceData.device_type}/state`,\n    payload: {\n        deviceId: deviceData.deviceId,\n        data: deviceData.data,\n        dateTime: deviceData.dateTime\n    }\n}));\n\n// 构建UPDATE查询 - 只更新实际成功的属性\nlet updateMsg = null;\nif (propertiesToUpdate.length > 0) {\n    const conditions = propertiesToUpdate\n        .map(item => `(device_id = '${item.device_id}' AND property_id = '${item.property_id}')`)\n        .join(\" OR \");\n\n    const updateQuery = `UPDATE device_properties SET status = 'pending' WHERE (${conditions}) AND status = 'success' AND request_type = 'state'`;\n    updateMsg = { query: updateQuery };\n}\n\nreturn [messages, updateMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":780,"wires":[[],[]]},{"id":"6486040006f03f66","type":"change","z":"955d78aac10139fe","g":"20b5958020a35a99","name":"","rules":[{"t":"set","p":"payload.dateTime","pt":"msg","to":"","tot":"date"}],"action":"","property":"","from":"","to":"","reg":false,"x":740,"y":680,"wires":[["086a1de8c310f0a4","0f207687a4b6bfbd"]]},{"id":"8a0dd1891f5c5c28","type":"debug","z":"955d78aac10139fe","g":"fcf57be2fb50f3a4","name":"msg 更新匹配","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":900,"y":360,"wires":[]},{"id":"b20f12265dd02368","type":"function","z":"955d78aac10139fe","g":"44d88b47b8d1b905","name":"function 75","func":"if(msg.pgsql.rowCount > 0){\n    return msg;\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":1100,"wires":[["12f191a9bf1022a1"]]},{"id":"25494a265d23d390","type":"postgreSQLConfig","name":"","host":"host.docker.internal","hostFieldType":"str","port":"5432","portFieldType":"num","database":"modbus_device","databaseFieldType":"str","ssl":"false","sslFieldType":"bool","applicationName":"","applicationNameType":"str","max":"10","maxFieldType":"num","idle":"1000","idleFieldType":"num","connectionTimeout":"10000","connectionTimeoutFieldType":"num","user":"livelab","userFieldType":"str","password":"livelab","passwordFieldType":"str"},{"id":"3211ebd24c9f85f3","type":"mqtt-broker","name":"","broker":"120.78.123.82","port":1883,"clientid":"","autoConnect":true,"usetls":false,"protocolVersion":4,"keepalive":60,"cleansession":true,"autoUnsubscribe":true,"birthTopic":"ROOT Connected","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"ROOT Offline","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"ROOT Shut up","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""}]