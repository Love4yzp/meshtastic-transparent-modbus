[{"id":"632d4d71cc1abd2c","type":"subflow","name":"Send Mesh","info":"","category":"","in":[{"x":200,"y":220,"wires":[{"id":"11f176b2edaf6387"}]}],"out":[],"env":[{"name":"channel","type":"str","value":"0"}],"meta":{},"color":"#DDAA99","status":{"x":760,"y":300,"wires":[{"id":"6875daf9fb761952","port":1}]}},{"id":"426501dd879010dd","type":"websocket out","z":"632d4d71cc1abd2c","name":"Meshtastic 发送","server":"","client":"meshtastic_ws","x":560,"y":220,"wires":[]},{"id":"11f176b2edaf6387","type":"function","z":"632d4d71cc1abd2c","name":"格式化发送消息","func":"// 检查是否有目标信息\n// if (!msg.mshParams) {\n//     node.error(\"缺少目标信息\");\n//     return null;\n// }\n\n\n// 构造发送消息\nconst outMsg = {\n    payload: {\n        message: JSON.stringify(msg.payload)\n    }\n};\n\n// 添加目标信息\n// if (msg.mshParams.channel !== undefined) {\n//     outMsg.payload.channel = msg.mshParams.channel;\n// } else if (msg.mshParams.destination) {\n//     outMsg.payload.destination = msg.mshParams.destination;\n// } else {\noutMsg.payload.channel = 0;  // 默认频道\n// }\n\nreturn outMsg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":220,"wires":[["426501dd879010dd"]]},{"id":"9f4fe910a7de3da6","type":"websocket in","z":"632d4d71cc1abd2c","name":"Meshtastic 接收","server":"","client":"meshtastic_ws","x":320,"y":320,"wires":[["6875daf9fb761952"]]},{"id":"6875daf9fb761952","type":"function","z":"632d4d71cc1abd2c","name":"statusMsg","func":"var payload = msg.payload;\n\n// 创建一个状态消息\nvar statusMsg = { payload: {} };\n\nif (payload.type === \"success\") {\n    statusMsg.payload = { fill: \"green\", shape: \"dot\", text: \"操作成功\" };\n} else if (payload.type === \"error\") {\n    statusMsg.payload = { fill: \"red\", shape: \"dot\", text: \"操作失败\" };\n    // } \n    // else if (payload.type === \"warning\") {\n    //     statusMsg.payload = { fill: \"yellow\", shape: \"dot\", text: \"警告\" };\n    // } else if (payload.type === \"info\") {\n    //     statusMsg.payload = { fill: \"blue\", shape: \"dot\", text: \"信息\" };\n} else {\n    // statusMsg.payload = { fill: \"grey\", shape: \"ring\", text: \"\" };\n    statusMsg = null;\n}\n\n// 返回两个输出：原始消息和状态消息\nreturn [msg, statusMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":550,"y":320,"wires":[[],[]]},{"id":"meshtastic_ws","type":"websocket-client","path":"ws://host.docker.internal:5800","tls":"","wholemsg":"false","hb":"0","subprotocol":"","headers":[]},{"id":"79ccf7f5c8897720","type":"tab","label":"设备控制下发","disabled":false,"info":"","env":[]},{"id":"d2dea9b9af63b4a9","type":"group","z":"79ccf7f5c8897720","name":"接收控制指令","style":{"label":true},"nodes":["3c7ca536c5ec31b5","f9ac50182cd8d12c","a38b623c9c403c44","ee4922aad3e497cd","7a9f9c9de24eb9f7","beb86e8234ce34e8","4f55d31b1daa6d74","ecea53f31427d776"],"x":114,"y":99,"w":712,"h":322},{"id":"3c7ca536c5ec31b5","type":"mqtt in","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"","topic":"livelab/device/+/set","qos":"0","datatype":"auto-detect","broker":"e6361d22d0a5ee3f","nl":false,"rap":true,"rh":0,"inputs":0,"x":230,"y":140,"wires":[["f9ac50182cd8d12c"]]},{"id":"f9ac50182cd8d12c","type":"function","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"解析 MQTT 控制","func":"function preprocessControlCommand(msg) {\n    // 解析 topic\n    // 格式: livelab/device/smart_breaker/set\n    const topicParts = msg.topic.split('/');\n    const deviceType = topicParts[2];  // smart_breaker\n    \n    // 解析 payload\n    const payload = msg.payload;\n    \n    // 提取关键信息\n    const deviceId = payload.deviceId;\n    const controlData = payload.data;\n    const dateTime = payload.dateTime;\n    \n    // 获取第一个控制命令的属性名和值\n    // 在这个例子中是 {control_gate: \"0\"}\n    const [propertyId, propertyValue] = Object.entries(controlData)[0];\n    \n    // 准备数据库查询\n    const query = `\n        WITH target_property AS (\n            UPDATE device_properties dp\n            SET \n                -- status = 'processing',\n                updated_at = NOW()\n            FROM devices d\n            LEFT JOIN device_connection_params dcp ON d.device_id = dcp.device_id\n            WHERE \n                d.device_id = dp.device_id\n                AND d.device_type = $1\n                AND dp.device_id = $2\n                AND dp.property_id = $3\n                AND dp.request_type = 'command'\n            RETURNING \n                dp.*,\n                d.device_type,\n                d.communication_type,\n                d.communication_id,\n                dcp.slave_address,\n                dcp.port_number\n        )\n        SELECT \n            tp.device_id,\n            tp.property_id,\n            tp.function_code,\n            tp.register_address,\n            tp.data_length,\n            tp.enum_values,\n            tp.communication_type,\n            tp.communication_id,\n            tp.slave_address,\n            tp.port_number\n        FROM target_property tp;\n        `;\n    const params = [deviceType, deviceId, propertyId]\n\n\n    // 准备输出消息\n    const newMsg = {\n        query: query,\n        params: params,\n        topic: msg.topic,\n        controlInfo: {\n            deviceType: deviceType,\n            deviceId: deviceId,\n            propertyId: propertyId,\n            propertyValue: propertyValue,\n            dateTime: dateTime\n        },\n        payload: {\n            originalPayload: payload,\n        }\n    };\n    \n    return newMsg;\n}\n\n// NodeRED Function 入口点\nreturn preprocessControlCommand(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":140,"wires":[["a38b623c9c403c44","ee4922aad3e497cd"]]},{"id":"ee4922aad3e497cd","type":"postgresql","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":490,"y":220,"wires":[["7a9f9c9de24eb9f7","4f55d31b1daa6d74"]]},{"id":"a38b623c9c403c44","type":"debug","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"debug 66","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":640,"y":140,"wires":[]},{"id":"7a9f9c9de24eb9f7","type":"debug","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"debug 67","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":720,"y":220,"wires":[]},{"id":"beb86e8234ce34e8","type":"debug","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"msg","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":690,"y":320,"wires":[]},{"id":"4f55d31b1daa6d74","type":"function","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"packControlMessage","func":"function packControlMessage(msg) {\n    // 获取数据库查询结果（第一行）\n    const dbResult = msg.payload[0];\n    // 获取控制信息\n    const controlInfo = msg.controlInfo;\n\n    // 生成唯一的会话ID（时间戳_序号）\n    const sessionId = `${Date.now()}_${Math.floor(Math.random() * 10)}`;\n    const communicationId = dbResult.communication_id.replace(\"R1000_\", \"\").padStart(4, \"0\");\n\n    // 构造控制消息\n    const controlMessage = {\n        // 基础信息\n        \"i\": communicationId,           // 通信ID\n        \"tp\": dbResult.property_id,              // 属性ID\n        \"v\": \"1\",                                // 版本号固定为 1\n        \"t\": \"r\",                                // connection_type 默认为 rtu\n        \"p\": dbResult.port_number,               // 从 device_connection_params 获取的端口号\n\n        // 控制命令内容\n        \"c\": {\n            \"a\": parseInt(dbResult.slave_address, 16),        // 从 device_connection_params 获取的从站地址\n            \"f\": parseInt(dbResult.function_code, 16),        // 功能码\n            \"r\": `0x${dbResult.register_address}`,           // 寄存器地址，添加0x前缀\n            \"n\": dbResult.data_length >=2 ? dbResult.data_length / 2 : 1,  // 数据长度（字节数），默认为1\n            \"d\": [parseInt(controlInfo.propertyValue)]        // 控制值\n        },\n\n        \"ss\": sessionId    // 会话ID\n    };\n\n    // 构造输出消息\n    const newMsg = {\n        payload: controlMessage,\n        // 保留原始信息用于追踪和调试\n        originalMsg: {\n            dbResult: dbResult,\n            controlInfo: controlInfo\n        }\n    };\n\n    return newMsg;\n}\n\n// NodeRED Function 入口点\nreturn packControlMessage(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":320,"wires":[["beb86e8234ce34e8","ecea53f31427d776"]]},{"id":"ecea53f31427d776","type":"subflow:632d4d71cc1abd2c","z":"79ccf7f5c8897720","g":"d2dea9b9af63b4a9","name":"","x":690,"y":380,"wires":[]},{"id":"08e511f68d1fb115","type":"function","z":"79ccf7f5c8897720","name":"解析 MQTT 控制","func":"function preprocessControlCommand(msg) {\n    // 解析 topic\n    // 格式: livelab/device/smart_breaker/set\n    const topicParts = msg.topic.split('/');\n    const deviceType = topicParts[2];  // smart_breaker\n    \n    // 解析 payload\n    const payload = msg.payload;\n    \n    // 提取关键信息\n    const deviceId = payload.deviceId;\n    const controlData = payload.data;\n    const dateTime = payload.dateTime;\n    \n    // 处理所有控制命令属性\n    const queries = [];\n    const allParams = [];\n    const controlProperties = [];\n\n    // 遍历所有数据属性\n    Object.entries(controlData).forEach(([propertyId, propertyValue], index) => {\n        // 为每个属性准备数据库查询 - 修改查询以获取当前值进行比较\n        const query = `\n            WITH target_property AS (\n                SELECT \n                    dp.*,\n                    d.device_type,\n                    d.communication_type,\n                    d.communication_id,\n                    dcp.slave_address,\n                    dcp.port_number,\n                    COALESCE(\n                        (SELECT value \n                         FROM device_property_values \n                         WHERE device_id = dp.device_id \n                         AND property_id = dp.property_id \n                         ORDER BY created_at DESC \n                         LIMIT 1),\n                        'null'\n                    ) as current_value\n                FROM device_properties dp\n                JOIN devices d ON d.device_id = dp.device_id\n                LEFT JOIN device_connection_params dcp ON d.device_id = dcp.device_id\n                WHERE \n                    d.device_type = $1\n                    AND dp.device_id = $2\n                    AND dp.property_id = $3\n                    AND dp.request_type = 'command'\n            )\n            SELECT * FROM target_property;\n        `;\n        \n        queries.push(query);\n        allParams.push([deviceType, deviceId, propertyId]);\n        controlProperties.push({\n            propertyId,\n            propertyValue\n        });\n    });\n\n    // 准备输出消息\n    const newMsg = {\n        queries: queries,\n        allParams: allParams,\n        topic: msg.topic,\n        controlInfo: {\n            deviceType: deviceType,\n            deviceId: deviceId,\n            properties: controlProperties,\n            dateTime: dateTime\n        },\n        payload: {\n            originalPayload: payload,\n        }\n    };\n    \n    return newMsg;\n}\n\n// NodeRED Function 入口点\nreturn preprocessControlCommand(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":520,"wires":[["134ce7685bf3983e","1bd25d095dc3b131"]]},{"id":"134ce7685bf3983e","type":"postgresql","z":"79ccf7f5c8897720","name":"","query":"SELECT * FROM ;","postgreSQLConfig":"25494a265d23d390","split":false,"rowsPerMsg":1,"outputs":1,"x":490,"y":600,"wires":[["ee17675ad32cbe63"]]},{"id":"ee17675ad32cbe63","type":"function","z":"79ccf7f5c8897720","name":"compareAndFilterProperties","func":"function compareAndFilterProperties(msg) {\n    const dbResults = msg.payload;\n    const controlInfo = msg.controlInfo;\n    \n    // 过滤需要更新的属性\n    const updatedProperties = [];\n    const filteredDbResults = [];\n    \n    dbResults.forEach((result, index) => {\n        const property = controlInfo.properties[index];\n        const currentValue = result.current_value;\n        const newValue = property.propertyValue;\n        \n        // 转换值为数字进行比较（如果可能）\n        const currentNumValue = !isNaN(currentValue) ? Number(currentValue) : currentValue;\n        const newNumValue = !isNaN(newValue) ? Number(newValue) : newValue;\n        \n        // 检查值是否发生变化\n        if (currentNumValue !== newNumValue) {\n            // 值已更改，需要更新\n            updatedProperties.push(property);\n            \n            // 更新数据库中的值\n            const updateQuery = `\n                UPDATE device_property_values\n                SET value = $1, created_at = $2\n                WHERE device_id = $3 AND property_id = $4;\n                \n                INSERT INTO device_property_values (device_id, property_id, value, created_at)\n                SELECT $3, $4, $1, $2\n                WHERE NOT EXISTS (\n                    SELECT 1 FROM device_property_values \n                    WHERE device_id = $3 AND property_id = $4\n                );\n            `;\n            \n            // 执行更新\n            const updateParams = [\n                newValue.toString(),\n                controlInfo.dateTime,\n                result.device_id,\n                property.propertyId\n            ];\n            \n            // 将需要更新的结果添加到过滤后的列表中\n            filteredDbResults.push({\n                ...result,\n                updateQuery,\n                updateParams\n            });\n        }\n    });\n    \n    if (updatedProperties.length === 0) {\n        // 没有需要更新的属性\n        return { needsUpdate: false };\n    }\n    \n    // 返回过滤后的结果\n    return {\n        needsUpdate: true,\n        payload: filteredDbResults,\n        controlInfo: {\n            ...controlInfo,\n            properties: updatedProperties\n        },\n        originalMsg: msg\n    };\n}\n\n// NodeRED Function 入口点\nreturn compareAndFilterProperties(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":700,"wires":[["10183aa5f16482d2"]]},{"id":"10183aa5f16482d2","type":"function","z":"79ccf7f5c8897720","name":"packControlMessage","func":"function packControlMessage(msg) {\n    // 首先检查是否需要更新\n    if (!msg.needsUpdate) {\n        return { payload: [] }; // 返回空数组，表示没有需要发送的消息\n    }\n\n    // 获取数据库查询结果（可能有多行）\n    const dbResults = msg.payload;\n    // 获取控制信息\n    const controlInfo = msg.controlInfo;\n\n    // 生成唯一的会话ID（时间戳_序号）\n    const sessionId = `${Date.now()}_${Math.floor(Math.random() * 10)}`;\n\n    // 为每个属性构造控制消息\n    const controlMessages = dbResults.map((dbResult, index) => {\n        const communicationId = dbResult.communication_id.replace(\"R1000_\", \"\").padStart(4, \"0\");\n        const property = controlInfo.properties[index];\n\n        // 执行数据库更新\n        if (dbResult.updateQuery) {\n            // 这里应该通过 Node-RED 的 PostgreSQL 节点执行更新\n            // 在实际实现中，你需要确保这个更新操作被正确处理\n        }\n\n        return {\n            // 基础信息\n            \"i\": communicationId,           // 通信ID\n            \"tp\": dbResult.property_id,     // 属性ID\n            \"v\": \"1\",                       // 版本号固定为 1\n            \"t\": \"r\",                       // connection_type 默认为 rtu\n            \"p\": dbResult.port_number,      // 从 device_connection_params 获取的端口号\n\n            // 控制命令内容\n            \"c\": {\n                \"a\": parseInt(dbResult.slave_address, 16),        // 从 device_connection_params 获取的从站地址\n                \"f\": parseInt(dbResult.function_code, 16),        // 功能码\n                \"r\": `0x${dbResult.register_address}`,           // 寄存器地址，添加0x前缀\n                \"n\": dbResult.data_length >= 2 ? dbResult.data_length / 2 : 1,  // 数据长度（字节数），默认为1\n                \"d\": [parseInt(property.propertyValue)]           // 控制值\n            },\n\n            \"ss\": `${sessionId}_${index}`   // 会话ID（添加索引以区分不同属性）\n        };\n    });\n\n    // 构造输出消息\n    const newMsg = {\n        payload: controlMessages,\n        // 保留原始信息用于追踪和调试\n        originalMsg: {\n            dbResults: dbResults,\n            controlInfo: controlInfo\n        }\n    };\n\n    return newMsg;\n}\n\n// NodeRED Function 入口点\nreturn packControlMessage(msg);\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":780,"wires":[["8833b584c792f030"]]},{"id":"6a463dbe6b3a2f9d","type":"mqtt in","z":"79ccf7f5c8897720","name":"","topic":"livelab/device/+/test","qos":"0","datatype":"auto-detect","broker":"e6361d22d0a5ee3f","nl":false,"rap":true,"rh":0,"inputs":0,"x":230,"y":520,"wires":[["08e511f68d1fb115"]]},{"id":"8833b584c792f030","type":"debug","z":"79ccf7f5c8897720","name":"debug 69","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":730,"y":780,"wires":[]},{"id":"1bd25d095dc3b131","type":"split","z":"79ccf7f5c8897720","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":640,"y":480,"wires":[[]]},{"id":"e6361d22d0a5ee3f","type":"mqtt-broker","name":"","broker":"120.78.123.82","port":1883,"clientid":"","autoConnect":true,"usetls":false,"protocolVersion":4,"keepalive":60,"cleansession":true,"autoUnsubscribe":true,"birthTopic":"ROOT Connected","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"ROOT Offline","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"ROOT Shut up","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"25494a265d23d390","type":"postgreSQLConfig","name":"","host":"host.docker.internal","hostFieldType":"str","port":"5432","portFieldType":"num","database":"modbus_device","databaseFieldType":"str","ssl":"false","sslFieldType":"bool","applicationName":"","applicationNameType":"str","max":"10","maxFieldType":"num","idle":"1000","idleFieldType":"num","connectionTimeout":"10000","connectionTimeoutFieldType":"num","user":"livelab","userFieldType":"str","password":"livelab","passwordFieldType":"str"}]